package doublepoint

//给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。
//输入：nums = [1,1,2]
//输出：2, nums = [1,2,_]
//解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
//输入：nums = [0,0,1,1,1,2,2,3,3,4]
//输出：5, nums = [0,1,2,3,4]
//解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
func removeDuplicates(nums []int) int {
	var left int
	for i := 0; i < len(nums); i++ {
		if nums[i] != nums[left] {
			left++
			nums[left] = nums[i]
		}
	}
	return left + 1
}

// 总结：双指针形式：同向移动，快指针遍历，慢指针指向处理好的序列尾部
// 可以将问题的答案和问题并排列出来，看看差异点
// 0 0 1 1 1 2 2 3 3 4
// 0 1 2 3 4 - - - - -
